#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('testapp:server');
var http = require('http');
var express = require('express');
var session = require('express-session');
var passport = require('passport');
var router = express.Router();
const models = require('../models');
var FacebookStrategy = require('passport-facebook').Strategy;

app.use(session({
  secret: 'd!@OF!@OR!@1212hp1fh1pf!@',
  resave: false,
  saveUninitialized: true
}));


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

passport.serializeUser(function(user, done) {
  console.log('serializeUser', user);
  done(null, user.id);
});

passport.deserializeUser(function(id, done) {
  console.log('deserializeUser', id);

  models.user.findAll()
      .then( result => {
    console.log("데이터 탐색 완료");

    for(var i=0; i < result.length; i++){
      let user = result[i].dataValues;
      if( id == user.id){
        console.log("매칭되는 아이디 발견");
        return done(null, user);
      }
    }
  });
});


passport.use(new FacebookStrategy({
  clientID: '651799692349093',
  clientSecret: 'edd74b82d25657477a9a8e78177dc973',
  callbackURL: "/auth/facebook/callback",
  profileFields:['id','displayName']
},
  function(accessToken, refreshToken, profile, done) {
    console.log(profile);
    let body = profile;
    // console.log(body);

    models.user.findAll()
      .then( result => {
    console.log("데이터 탐색 완료");
  
    var id = body.id;

    for(var i=0; i < result.length; i++){
      let user = result[i].dataValues; 

      console.log(user);
      
      if( id == user.id){
        console.log("매칭되는 아이디 발견");
        req.session.nickname = user.displayName;
        return done(null, user)
      }  
    
      models.user.create({
        id : body.id,
        nickname : body.displayName,
        // usermail : body.email
        })
        .then( result => {
          console.log("추가성공");
          done(null, user)
          res.json({ success:result });
        })
        .catch( err => {
          console.log("추가실패");
          console.log(err);
        });
      }   
    });
  })
);

    // User.findOrCreate(..., function(err, user) {
    //   if (err) { return done(err); }
    //   done(null, user);
    // })